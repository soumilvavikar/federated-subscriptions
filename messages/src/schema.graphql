extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@requires", "@external"]
  )

type Query {
  # Retrieve all conversations for the logged-in user
  conversations: [Conversation]
  # Retrieves your conversation with a given recipient
  conversation(recipientId: ID!): Conversation
}

type Mutation {
  # Initiate a new conversation with a particular user
  createConversation(recipientId: ID!): Conversation
  # Submit a new message to a specified conversation
  sendMessage(message: NewMessageInput!): Message
}

type Subscription {
  # Start a new subscription for messages in a particular conversation, with an optional timestamp cursor to replay from
  listenForMessageInConversation(id: ID!): Message
}

type Conversation {
  id: ID!
  # The messages belonging to the conversation
  messages: [Message]
  # The timestamp from when the conversation was created
  createdAt: String!
}

type Message {
  id: ID!
  # The text content of the message
  text: String!
  # The user that sent the message
  sentFrom: User!
  # The user the message was sent to
  sentTo: User!
  # The timestamp of when the message was sent
  sentTime: String
}

input NewMessageInput {
  # The text content of the message
  text: String!
  # The ID of the conversation
  conversationId: String!
}

type User @key(fields: "id") {
  id: ID!
}
